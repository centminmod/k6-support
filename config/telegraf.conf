# Global tags can be specified here in key="value" format.
[global_tags]

[agent]
  interval = "5s"
  round_interval = true
  metric_buffer_limit = 10000
  flush_buffer_when_full = true
  collection_jitter = "0s"
  flush_interval = "1s"
  flush_jitter = "0s"
  debug = false
  quiet = false
  hostname = ""

# Original K6 InfluxDB Output
[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]
  database = "${INFLUXDB_DB_TELEGRAF}"
  timeout = "5s"
  username = "${INFLUXDB_TELEGRAF_USER}"
  password = "${INFLUXDB_TELEGRAF_PASSWORD}"
  skip_database_creation = true

[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "${INFLUX_TOKEN}"
  organization = "myorg"
  bucket = "cloudflare"
  content_encoding = "gzip"
  namepass = ["cloudflare_*"]

# Original StatSD Input for K6
[[inputs.statsd]]
  protocol = "udp"
  max_tcp_connections = 250
  tcp_keep_alive = false
  service_address = ":8125"
  delete_gauges = true
  delete_counters = true
  delete_sets = true
  delete_timings = true
  percentiles = [90]
  metric_separator = "_"
  allowed_pending_messages = 10000
  percentile_limit = 1000

# Existing Docker Input
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  source_tag = false
  # Replace deprecated options
  container_name_include = []
  container_name_exclude = []
  timeout = "5s"
  perdevice_include = ["cpu", "blkio"]
  total = false
  docker_label_include = []
  docker_label_exclude = []

# System Metrics
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  fielddrop = ["time_*"]

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs"]

[[inputs.diskio]]
[[inputs.kernel]]
[[inputs.mem]]
[[inputs.processes]]
[[inputs.swap]]
[[inputs.system]]

[[inputs.net]]
  # Remove deprecated option
  interfaces = ["eth*", "en*"]

[[inputs.netstat]]
[[inputs.interrupts]]
[[inputs.linux_sysctl_fs]]

# Additional Cloudflare Monitoring
[[inputs.prometheus]]
  ## Fix port to match cloudflare-exporter service
  urls = ["http://cloudflare-exporter:8080/metrics"]
  metric_version = 2
  name_prefix = "cloudflare_"
  interval = "5s"

[[inputs.http_response]]
  ## Fix port to match cloudflare-exporter service
  urls = ["http://cloudflare-exporter:8080"]
  response_timeout = "5s"
  method = "GET"
  follow_redirects = true
  response_status_code = 200