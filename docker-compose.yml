networks:
  k6-support:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_dns_roundrobin: "true" 

volumes:
  prometheus_data: {}
  grafana_data: {}
  influxdb_data: {}

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: k6-support-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--log.level=debug'
    ports:
      - "9199:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - k6-support
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  influxdb:
      image: influxdb:2.7
      container_name: k6-support-influxdb
      dns: ["172.18.0.1"]
      restart: unless-stopped
      environment:
        # Initial setup
        - DOCKER_INFLUXDB_INIT_MODE=${DOCKER_INFLUXDB_INIT_MODE}
        - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
        - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
        - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
        - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
        - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
        - DOCKER_INFLUXDB_INIT_RETENTION=${DOCKER_INFLUXDB_INIT_RETENTION}
        - DOCKER_INFLUXDB_INIT_PORT=${DOCKER_INFLUXDB_INIT_PORT}
        - DOCKER_INFLUXDB_INIT_HOST=${DOCKER_INFLUXDB_INIT_HOST}
        # V1 API Compatibility
        - INFLUXDB_HTTP_AUTH_ENABLED=true
        - INFLUXDB_HTTP_BIND_ADDRESS=:8086
        - DOCKER_INFLUXDB_INIT_V1_SUPPORT_ENABLED=true
        # Pass through all environment variables needed by init script
        - INFLUXDB_TELEGRAF_USER
        - INFLUXDB_TELEGRAF_PASSWORD
        - INFLUXDB_K6_USER
        - INFLUXDB_K6_PASSWORD
        - INFLUXDB_PSRECORD_USER
        - INFLUXDB_PSRECORD_PASSWORD
        - INFLUXDB_DB_K6
        - INFLUXDB_DB_TELEGRAF
        - INFLUXDB_DB_PSRECORD
        - INFLUX_TOKEN
      volumes:
        - influxdb_data:/var/lib/influxdb2
        - ./config/influxdb/init:/docker-entrypoint-initdb.d:ro
      ports:
        - "8186:8086"
      networks:
        - k6-support
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 40s

  telegraf:
    image: telegraf:1.27
    container_name: k6-support-telegraf
    dns: ["172.18.0.1"]
    user: "telegraf:${DOCKER_GROUP_ID}"
    group_add:
      - ${DOCKER_GROUP_ID:-999}
    restart: unless-stopped
    environment:
      - HOST_PROC=/host/proc
      - HOST_SYS=/host/sys
      - HOST_ETC=/host/etc
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
      - HOST_MOUNT_PREFIX=/hostfs
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - INFLUXDB_DB_TELEGRAF=${INFLUXDB_DB_TELEGRAF}
      # V1 API credentials
      - INFLUXDB_TELEGRAF_USER=${INFLUXDB_TELEGRAF_USER}
      - INFLUXDB_TELEGRAF_PASSWORD=${INFLUXDB_TELEGRAF_PASSWORD}
      # V2 API credentials
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
    privileged: false
    volumes:
      - ./config/telegraf.conf:/etc/telegraf/telegraf.conf:ro 
      - ./config/telegraf/telegraf.d:/etc/telegraf/telegraf.d:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/host/sys:ro
      - /proc:/host/proc:ro
      - /etc:/host/etc:ro
    depends_on:
      influxdb:
        condition: service_healthy
      cloudflare-exporter:
        condition: service_healthy
    ports:
      - "127.0.0.1:8125:8125/udp"
    networks:
      - k6-support
    healthcheck:
      test: ["CMD", "telegraf", "--test", "--config", "/etc/telegraf/telegraf.conf"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana-oss:10.2.0
    container_name: k6-support-grafana
    dns: 
      - "172.18.0.1"  # Keep Docker bridge DNS
      - "1.1.1.1"     # Add Cloudflare's DNS as backup
      - "8.8.8.8"     # Add Google's DNS as additional backup
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-worldmap-panel
    ports:
      - "9409:3000"
    volumes:
      - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards/k6:/var/lib/grafana/dashboards/k6:ro
      - ./config/grafana/dashboards/influxdb:/var/lib/grafana/dashboards/influxdb:ro
      - ./config/grafana/dashboards/system:/var/lib/grafana/dashboards/system:ro
      - ./config/grafana/dashboards/cloudflare:/var/lib/grafana/dashboards/cloudflare:ro
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning/plugins:/etc/grafana/provisioning/plugins:ro
      - ./config/grafana/provisioning/notifiers:/etc/grafana/provisioning/notifiers:ro
      - ./config/grafana/provisioning/alerting:/etc/grafana/provisioning/alerting:ro
    networks:
      - k6-support
    depends_on:
      influxdb:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  node-exporter:
    image: prom/node-exporter:latest
    container_name: k6-support-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - k6-support
    ports:
      - "9100:9100"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9100/metrics"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  cloudflare-exporter:
    image: cyb3rjak3/cloudflare-exporter:latest
    container_name: k6-support-cloudflare-exporter
    dns: 
      - "172.18.0.1"  # Keep Docker bridge DNS
      - "1.1.1.1"     # Add Cloudflare's DNS as backup
      - "8.8.8.8"     # Add Google's DNS as additional backup
    restart: unless-stopped
    environment:
      - CF_API_TOKEN=${CF_API_TOKEN}
      - CF_ZONES=${CF_ZONES}
      - SCRAPE_DELAY=300
      - LISTEN=:8080
      - METRICS_PATH=/metrics
      - CF_BATCH_SIZE=10
      - FREE_TIER=false
      - CF_EXCLUDE_ZONES=${CF_EXCLUDE_ZONES:-}
      - METRICS_DENYLIST=${METRICS_DENYLIST:-}
    ports:
      - "9198:8080"
    networks:
      - k6-support
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metrics"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s